/**
 * @jest-environment jsdom
 */

const $ = require('jquery');
global.$ = $;
const module = require('../static/audit.js');
const build_audit_table = module.build_audit_table

// Mock FormData for the test environment
global.FormData = jest.fn(() => ({
    append: jest.fn(),
}));

const api_key = 'abcdefghijklmnopqrstuvwxyz'; 
global.api_key = api_key;

const API_BASE = 'https://planttracer.com/'; 
global.API_BASE = API_BASE;

describe('build_audit_table', () => {
    beforeEach(() => {
        fetch.resetMocks();  // Reset mocks before each test
        jest.clearAllMocks();  // Clear previous mocks
    });

    test('should handle empty logs gracefully', async () => {
        fetch.mockResponseOnce(
            JSON.stringify({
                error: false,
                logs: [], // Simulate an empty logs array
            })
        );
    
        build_audit_table();
    
        // Ensure DataTable is called with empty data
        expect($('#audit').DataTable).toHaveBeenCalledWith({
            columns: [], // No columns if no logs
            data: [], // No data if no logs
        });
    });

    test('should make a POST request to the correct API endpoint', async () => {
        fetch.mockResponseOnce(
            JSON.stringify({
                error: false,
                logs: [{ log1: "value1", log2: "value2" }],
            })
        );

        build_audit_table();

        expect(fetch).toHaveBeenCalledWith(`${API_BASE}api/get-logs`, expect.any(Object));
        const callArgs = fetch.mock.calls[0][1]; // Get the second argument of the fetch call
        expect(callArgs.method).toBe("POST");
        expect(callArgs.body instanceof FormData).toBe(true);
    });

    test('should populate DataTable with correct columns and data on success', async () => {
        fetch.mockResponseOnce(
            JSON.stringify({
                error: false,
                logs: [{ column1: "data1", column2: "data2" }],
            })
        );

        build_audit_table();

        // Verify DataTable is initialized with correct columns and data
        expect($('#audit').DataTable).toHaveBeenCalledWith({
            columns: [{ data: "column1", title: "column1" }, { data: "column2", title: "column2" }],
            data: [{ column1: "data1", column2: "data2" }],
        });
    });

    test('should display an error message when API returns an error', async () => {
        fetch.mockResponseOnce(
            JSON.stringify({
                error: true,
                message: "An error occurred",
            })
        );

        build_audit_table();

        // Verify error message is displayed
        expect($('#message').html).toHaveBeenCalledWith('error: An error occurred');
        expect($('#audit').DataTable).not.toHaveBeenCalled();
    });

    test('should handle empty logs gracefully', async () => {
        fetch.mockResponseOnce(
            JSON.stringify({
                error: false,
                logs: [],
            })
        );

        build_audit_table();

        // Ensure DataTable is called with empty data
        expect($('#audit').DataTable).toHaveBeenCalledWith({
            columns: [],
            data: [],
        });
    });

    test('should not break when logs are undefined or missing', async () => {
        fetch.mockResponseOnce(
            JSON.stringify({
                error: false,
            })
        );

        build_audit_table();

        // Ensure DataTable is called with empty data if no logs are provided
        expect($('#audit').DataTable).toHaveBeenCalledWith({
            columns: [],
            data: [],
        });
    });
});
